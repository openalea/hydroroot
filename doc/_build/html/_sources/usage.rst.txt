=====
Usage
=====

Run calculation on a given architecture
---------------------------------------
The following example shows how to run a simulation to calculate the out going sap flux and the equivalent conductance of a given architecture. Hydroroot is able to read two file format for architecture: RSML (http://rootsystemml.github.io/) and a simple tabulated text file that only details root lengths and branching positions. The later format is enough to describe root in hydroponic condition.

The text format architecture file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=======================  ========================  =====
distance_from_base_(mm)  lateral_root_length_(mm)  order
=======================  ========================  =====
0.89                     90.81             	       1
3.02                     63.98             	       1
102.94                     0.0             	       1
2.14                     23.72             	       1-1
90.81                     0.0             	       1-1
2.48                     5.15             	       1-2
63.98                     0.0             	       1-2
=======================  ========================  =====

This a tab separated text file with 3 columns:
1. the distance from base of the branching laterals in mm
2. the lateral root length in mm
3. a string of one or more number indicating the parent root

In the example above, the root has two lateral of 1st order and on each of them one lateral of 2d order. The order of 1 indicates that the laterals are on the primary root. The last line with order 1 with 0.0 in the second column indicates the primary root tip.
The line with order 1-1 indicates that this a second order lateral on the first lateral positioned at 2.14 mm from the branching on the primary root. And so on.

A 4th column with the averaged diameter of the root may be given, that may be used to build the MTG representing the architecture.

Running the calculation
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: python

    import pandas as pd
    from openalea.plantgl.all import Viewer
    from hydroroot.display import plot as mtg_scene
    from hydroroot import radius
    from hydroroot.main import hydroroot_flow
    from hydroroot.generator.measured_root import mtg_from_aqua_data

Reading the file architecture as a DataFrame

.. code-block:: python

    df = pd.read_csv('data/plant-1.txt', sep = '\t', dtype = {'order': str})
    df['db'] = df['distance_from_base_(mm)'] * 1.e-3 # used in mtg_from_aqua_data mm -> m
    df['lr'] = df['lateral_root_length_(mm)'] * 1.e-3 # used in mtg_from_aqua_data

Building the MTG from the file, and some properties needed for the calculation, with correct radius

.. code-block:: python

    g = mtg_from_aqua_data(df, segment_length = 1.0e-4) # creating the MTG from the file with a vertex length of 0.1 mm
    g = radius.ordered_radius(g, 7.0e-5, 0.7) # set the radius of the primary root to 70 um, and to 70*0.7^d to lateral of order d
    g = radius.compute_relative_position(g) # calculation of properties used in the model see compute_relative_position doc

Some conductance data versus distance to tip

.. code-block:: python

    k_radial_data=([0, 0.2],[300.0,300.0])
    K_axial_data=([0, 0.2],[3.0e-5,4.0e-4])

Flux and equivalent conductance calculation, for a root in an external hydroponic medium at 0.4 MPa, its base at 0.1 MPa,
and with the conductances set above.

.. code-block:: python

    g, keq, jv = hydroroot_flow(g, psi_e = 0.4, psi_base = 0.1, 
						 axial_conductivity_data = K_axial_data, radial_conductivity_data = k_radial_data)

.. code-block:: python

    print(keq,jv)

Displaying the architecture directly from the file using the Plantgl viewer (https://github.com/openalea/plantgl).

.. code-block:: python

    %gui qt
    Viewer.display(mtg_scene(g, prop_cmap='j')) # j is the radial flux in ul/s
    
Run calculation on a generated architecture
-------------------------------------------

For the following example some function are defined in https://github.com/openalea/hydroroot/blob/main/example/shared_functions.py

.. code-block:: python

    import pandas 
    from shared_functions import *

The Hydroroot generator of architecture is described in
(`Boursiac et al., 2022 <https://doi.org/10.1093/plphys/kiac281>`_).
It uses length distribution law for laterals, specific to a given
species, to generate realistic architecture. Here we use the length laws
determinated for Col0 arabidopsis.

.. code-block:: python

    s = my_seed() # create a seed for the markov generator or give one
    length_data = [] # length law used to generate arabidopsis realistic architecture
    for filename in ['data/length_LR_order1_160615.csv','data/length_LR_order2_160909.csv']:
		 df = pandas.read_csv(filename, sep = ';', header = 1, names = ('LR_length_mm', 'relative_distance_to_tip'))
		 df.sort_values(by = 'relative_distance_to_tip', inplace = True)
		 length_data.append(df)

We generate the MTG with some specific parameters:

- primary_length: length of the primary root
- delta: the average distance between lateral branching
- branching_variability: the variability of the branching distance around delta
- nude_length: distance from the tip without any laterals
- order_max: the maximum order of laterals

.. code-block:: python

    g = generate_g(seed = s, length_data = length_data, branching_variability = 0.25,
		  delta = 2e-3, nude_length = 2e-3, primary_length = 0.13, segment_length = 1e-4, order_max = 4)

Setting some properties needed for the calculation

.. code-block:: python

    g = radius.ordered_radius(g, 7.0e-5, 0.7) # set the radius of the primary root to 70 um, and to 70*0.7^d to lateral of order d
    g = radius.compute_length(g, length=1.0e-4) # set the length of each element
    g = radius.compute_relative_position(g) # calculation of properties used in the model see compute_relative_position doc

Some conductance data versus distance to tip

.. code-block:: python

    k_radial_data=([0, 0.2],[300.0,300.0])
    K_axial_data=([0, 0.2],[3.0e-5,4.0e-4])

Flux and equivalent conductance calculation, for a root in an external
hydroponic medium at 0.4 MPa, its base at 0.1 MPa, and with the
conductances set above.

.. code-block:: python

    from hydroroot.main import hydroroot_flow

.. code-block:: python

    g, keq, jv = hydroroot_flow(g, psi_e = 0.4, psi_base = 0.1, 
						 axial_conductivity_data = K_axial_data, radial_conductivity_data = k_radial_data)

.. code-block:: python

    print(keq,jv)

Display the local water uptake heatmap in 3D

.. code-block:: python

    %gui qt
    plot(g, prop_cmap='j') # j is the radial flux in ul/s
    

Model parameters
----------------

The main model parameters are grouped in the python class parameters, see :class:`hydroroot.init_parameter.Parameters`.
The parameters may be passed to the class by reading a yaml file, see :meth:`hydroroot.init_parameter.Parameters.read_file`.

The structure of the yaml file is the following (see examples at https://github.com/openalea/hydroroot)

| **archi**
|	**read_architecture:** Boulean
|		True read an architecture file, False generate an architecture
|	**input_dir**: String
|		the folder with the architecture file, relative path to the script
|	**input_file**: list of string
|		list of architecture file names, eg. [file1.txt] or [file1.txt, file2.txt, file3.txt] wildcar may be used
|	**seed**: int or list of int
|		the seed used to generate architecture
|	**length_file**: list of string
|		name of the files containing the length law, relative path
|		file format: "LR_length_mm" ; "relative_distance_to_tip"
|		laws used to generate lateral roots of the 1st order (1_order_law), and lateral roots of order above 1 (2_order_law)
|	**primary_length**: float or list of float
|		primary root length in m used when generating architecture
|		unit: m
|	**branching_delay**: float or list of float
|		distance between branching
|		unit: m
|	**branching_variability**: float
|		maximum random variation around the branching_delay value
|		between [0 ; 1]
|	**order_max**: int
|		maximum order of laterals possible
|	**segment_length**: float
|		MTG vertices length
|		unit: m
|	**nude_length**: float or list of float
|		part of roots without any lateral root, distance from tip
|		unit: m
|	**ref_radius**: float
|		reference radius of the primary root
|		unit: m
|	**order_decrease_factor**: float
|		radius decrease factor applied when increasing order
|		radius of lateral order n: r = order_decrease_factor^n ** ref_radius
| **hydro**
|	**k0**: float
|		radial conductivity
|		unit: :math:`\mu L.s^{-1}.MPa^{-1}.m^{-2}`
|	**axial_conductance_data**: 2 list of float
|		axial_conductance_data, K(x)
|		unit: :math:`\mu L.m.s^{-1}.MPa^{-1}`
| **experimental**
|	**Jv**:  float
|		flux at the root base
|		unit: :math:`\mu L.s^{-1}`
|	**psi_e**:  float
|		hydrostatic pressure outside the root (pressure chamber)
|		unit: :math:`MPa`
|	**psi_base**:  float
|		hydrostatic pressure at the root base (e.g. atmospheric pressure for decapitated plant)
|		unit: :math:`MPa`
| **output**:
|	**intercepts**: float or list of float
|		distance from the base for number of intercepts calculation
|		unit: m
|	**radfold**: float or list of float
|		factor to explore a k0 range
|	**axfold**: float or list of float
|		factor to explore a axial conductance range
|	**run_nb**: int
|		number of run with the same set of parameters

Few parameters may be set to list of float, integer allowing to run successive simulation.
For list of number there are two syntax: [x1, ..., xn] or range(start, end, step).
For example, range(0.02, 0.09, 0.02) or [0.02, 0.04, 0.06, 0.08] will give the same results.
The parameter will take successively the values 0.02, 0.04, 0.06 and 0.08.
This allows to explore with a part of the same set of parameters the effect of the changing parameter. The parameter
*run_nb* would be useful with read_architecture = False and no given seed to generate different architectures.

**Note:** Parameter is just a python class. It can not be used directly with Hydroroot functions, intermediary script should be used.
We will give you some examples using scripts that be found at https://github.com/openalea/hydroroot in example.

Run simple calculation using the Parameters class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    import pandas as pd
    from hydroroot import radius
    from hydroroot.main import hydroroot_flow
    from hydroroot.init_parameter import Parameters
    from hydroroot.generator.measured_root import mtg_from_aqua_data
    from shared_functions import plot

.. code-block:: python

    parameter = Parameters()
    parameter.read_file('parameters.yml')

.. code-block:: python

    df = pd.read_csv('data/plant-1.txt', sep = '\t', dtype = {'order': str})
    df['db'] = df['distance_from_base_(mm)'] * 1.e-3
    df['lr'] = df['lateral_root_length_(mm)'] * 1.e-3

.. code-block:: python

    g = mtg_from_aqua_data(df, segment_length = parameter.archi['segment_length']) # creating the MTG from the file with a node length of 0.1 mm

.. code-block:: python

    # compute radius property on MTG
    g = radius.ordered_radius(g, parameter.archi['ref_radius'], parameter.archi['order_decrease_factor'])

    # compute length property and parametrisation
    g = radius.compute_relative_position(g)

    # radial conductivity is given in the parameters.yml as a uniform value to use hydroroot_flow we have to write
    # as 2 lists, one for the abscissa and one for the values
    k = parameter.hydro['k0']
    radial_conductivity_data = ([0.0, 0.2],[k,k])
    g, keq, jv = hydroroot_flow(g, segment_length = parameter.archi['segment_length'], psi_e = parameter.exp['psi_e'],
                                psi_base = parameter.exp['psi_base'], axial_conductivity_data = parameter.hydro['axial_conductance_data'],
                                radial_conductivity_data = radial_conductivity_data)

.. code-block:: python

    print(keq,jv)

.. code-block:: python

    %gui qt
    plot(g, prop_cmap='j') # j is the radial flux in ul/s
